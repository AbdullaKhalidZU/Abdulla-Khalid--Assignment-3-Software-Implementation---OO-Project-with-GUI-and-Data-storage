# -*- coding: utf-8 -*-
"""Full code with Guest GUI window test cases

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1psk3DmslA8bkj3EF7D-ALSH3kcjR7VvL
"""

import tkinter as tk
from tkinter import messagebox



class Employee:
    def __init__(self, name, employee_id, department, job_title, basic_salary, age, date_of_birth, passport_details):
        self._name = name
        self._employee_id = employee_id
        self._department = department
        self._job_title = job_title
        self._basic_salary = basic_salary
        self._age = age
        self._date_of_birth = date_of_birth
        self._passport_details = passport_details

    def calculate_salary(self):
        # Basic implementation, can be extended for specific job titles
        return self._basic_salary

    # Getter and Setter methods
    def get_name(self):
        return self._name

    def set_name(self, name):
        self._name = name

    def get_employee_id(self):
        return self._employee_id

    def set_employee_id(self, employee_id):
        self._employee_id = employee_id

    def get_department(self):
        return self._department

    def set_department(self, department):
        self._department = department

    def get_job_title(self):
        return self._job_title

    def set_job_title(self, job_title):
        self._job_title = job_title

    def get_basic_salary(self):
        return self._basic_salary

    def set_basic_salary(self, basic_salary):
        self._basic_salary = basic_salary

    def get_age(self):
        return self._age

    def set_age(self, age):
        self._age = age

    def get_date_of_birth(self):
        return self._date_of_birth

    def set_date_of_birth(self, date_of_birth):
        self._date_of_birth = date_of_birth

    def get_passport_details(self):
        return self._passport_details

    def set_passport_details(self, passport_details):
        self._passport_details = passport_details


class Manager(Employee):
    def __init__(self, name, employee_id, department, job_title, basic_salary, age, date_of_birth, passport_details):
        super().__init__(name, employee_id, department, job_title, basic_salary, age, date_of_birth, passport_details)
        self._team_managed = []

    def get_team_managed(self):
        return self._team_managed

    def add_employee(self, employee):
        self._team_managed.append(employee)

    def remove_employee(self, employee):
        self._team_managed.remove(employee)


class Salesperson(Employee):
    def __init__(self, name, employee_id, department, job_title, basic_salary, age, date_of_birth, passport_details):
        super().__init__(name, employee_id, department, job_title, basic_salary, age, date_of_birth, passport_details)
        self._manager = None

    def get_manager(self):
        return self._manager

    def set_manager(self, manager):
        self._manager = manager


class Client:
    def __init__(self, client_id, name, address, contact_details, budget):
        self._client_id = client_id
        self._name = name
        self._address = address
        self._contact_details = contact_details
        self._budget = budget

    # Getter and Setter methods
    def get_client_id(self):
        return self._client_id

    def set_client_id(self, client_id):
        self._client_id = client_id

    def get_name(self):
        return self._name

    def set_name(self, name):
        self._name = name

    def get_address(self):
        return self._address

    def set_address(self, address):
        self._address = address

    def get_contact_details(self):
        return self._contact_details

    def set_contact_details(self, contact_details):
        self._contact_details = contact_details

    def get_budget(self):
        return self._budget

    def set_budget(self, budget):
        self._budget = budget


class Supplier:
    def __init__(self, supplier_id, name, address, contact_details):
        self._supplier_id = supplier_id
        self._name = name
        self._address = address
        self._contact_details = contact_details

    # Getter and Setter methods
    def get_supplier_id(self):
        return self._supplier_id

    def set_supplier_id(self, supplier_id):
        self._supplier_id = supplier_id

    def get_name(self):
        return self._name

    def set_name(self, name):
        self._name = name

    def get_address(self):
        return self._address

    def set_address(self, address):
        self._address = address

    def get_contact_details(self):
        return self._contact_details

    def set_contact_details(self, contact_details):
        self._contact_details = contact_details


class Venue:
    def __init__(self, venue_id, name, address, contact, min_guests, max_guests):
        self._venue_id = venue_id
        self._name = name
        self._address = address
        self._contact = contact
        self._min_guests = min_guests
        self._max_guests = max_guests

    # Getter and Setter methods
    def get_venue_id(self):
        return self._venue_id

    def set_venue_id(self, venue_id):
        self._venue_id = venue_id

    def get_name(self):
        return self._name

    def set_name(self, name):
        self._name = name

    def get_address(self):
        return self._address

    def set_address(self, address):
        self._address = address

    def get_contact(self):
        return self._contact

    def set_contact(self, contact):
        self._contact = contact

    def get_min_guests(self):
        return self._min_guests

    def set_min_guests(self, min_guests):
        self._min_guests = min_guests

    def get_max_guests(self):
        return self._max_guests

    def set_max_guests(self, max_guests):
        self._max_guests = max_guests


class Event:
    def __init__(self, event_id, type, theme, date, time, duration, venue, client, guest_list, catering_company,
                 cleaning_company, decorations_company, entertainment_company, furniture_company, invoice):
        self._event_id = event_id
        self._type = type
        self._theme = theme
        self._date = date
        self._time = time
        self._duration = duration
        self._venue = venue
        self._client = client
        self._guest_list = guest_list
        self._catering_company = catering_company
        self._cleaning_company = cleaning_company
        self._decorations_company = decorations_company
        self._entertainment_company = entertainment_company
        self._furniture_company = furniture_company
        self._invoice = invoice

    # Getter and Setter methods
    def get_event_id(self):
        return self._event_id

    def set_event_id(self, event_id):
        self._event_id = event_id

    def get_type(self):
        return self._type

    def set_type(self, type):
        self._type = type

    def get_theme(self):
        return self._theme

    def set_theme(self, theme):
        self._theme = theme

    def get_date(self):
        return self._date

    def set_date(self, date):
        self._date = date

    def get_time(self):
        return self._time

    def set_time(self, time):
        self._time = time

    def get_duration(self):
        return self._duration

    def set_duration(self, duration):
        self._duration = duration

    def get_venue(self):
        return self._venue

    def set_venue(self, venue):
        self._venue = venue

    def get_client(self):
        return self._client

    def set_client(self, client):
        self._client = client

    def get_guest_list(self):
        return self._guest_list

    def add_guest(self, guest):
        self._guest_list.append(guest)

    def remove_guest(self, guest):
        self._guest_list.remove(guest)

    def get_catering_company(self):
        return self._catering_company

    def set_catering_company(self, catering_company):
        self._catering_company = catering_company

    def get_cleaning_company(self):
        return self._cleaning_company

    def set_cleaning_company(self, cleaning_company):
        self._cleaning_company = cleaning_company

    def get_decorations_company(self):
        return self._decorations_company

    def set_decorations_company(self, decorations_company):
        self._decorations_company = decorations_company

    def get_entertainment_company(self):
        return self._entertainment_company

    def set_entertainment_company(self, entertainment_company):
        self._entertainment_company = entertainment_company

    def get_furniture_company(self):
        return self._furniture_company

    def set_furniture_company(self, furniture_company):
        self._furniture_company = furniture_company

    def get_invoice(self):
        return self._invoice

    def set_invoice(self, invoice):
        self._invoice = invoice


class Guest:
    def __init__(self, guest_id, name, address, contact_details):
        self._guest_id = guest_id
        self._name = name
        self._address = address
        self._contact_details = contact_details

    # Getter and Setter methods
    def get_guest_id(self):
        return self._guest_id

    def set_guest_id(self, guest_id):
        self._guest_id = guest_id

    def get_name(self):
        return self._name

    def set_name(self, name):
        self._name = name

    def get_address(self):
        return self._address

    def set_address(self, address):
        self._address = address

    def get_contact_details(self):
        return self._contact_details

    def set_contact_details(self, contact_details):
        self._contact_details = contact_details


class ManagementApp:
    def __init__(self, master):
        self.master = master
        self.master.title("Management System")

        self.label = tk.Label(master, text="Guest ID:")
        self.label.grid(row=0, column=0)

        self.entry = tk.Entry(master)
        self.entry.grid(row=0, column=1)

        self.add_guest_button = tk.Button(master, text="Add Guest", command=self.add_guest)
        self.add_guest_button.grid(row=1, column=0)

        self.delete_guest_button = tk.Button(master, text="Delete Guest", command=self.delete_guest)
        self.delete_guest_button.grid(row=1, column=1)

        self.modify_guest_button = tk.Button(master, text="Modify Guest", command=self.modify_guest)
        self.modify_guest_button.grid(row=1, column=2)

        self.display_guest_button = tk.Button(master, text="Display Guest", command=self.display_guest)
        self.display_guest_button.grid(row=1, column=3)

        # List to store guest instances
        self.guests = []

        # Initialize guests from provided data
        self.initialize_guests()

    def initialize_guests(self):
        # Initialize guests from provided data
        # Guest data provided: guest_id, name, address, contact_details
        guest_data = [
            (1, "Ali ", "Address 1", "123-456-7890"),
            (2, "Abdulla ", "Address 2", "456-789-0123"),
            (3, "Khalid", "Address 3", "789-012-3456"),
        ]

        for data in guest_data:
            guest = Guest(*data)
            self.guests.append(guest)

    def add_guest(self):
        guest_id = int(input("Enter guest ID: "))
        name = input("Enter guest name: ")
        address = input("Enter guest address: ")
        contact_details = input("Enter guest contact details: ")

        guest = Guest(guest_id, name, address, contact_details)
        self.guests.append(guest)

        print("Guest added successfully!")

    def delete_guest(self):
        guest_id = int(input("Enter guest ID to delete: "))
        for guest in self.guests:
            if guest.get_guest_id() == guest_id:
                self.guests.remove(guest)
                print("Guest deleted successfully!")
                return
        print("Guest not found.")

    def modify_guest(self):
        guest_id = int(input("Enter guest ID to modify: "))
        for guest in self.guests:
            if guest.get_guest_id() == guest_id:
                print("Modify Guest:")
                name = input(f"Enter new name (current: {guest.get_name()}): ")
                address = input(f"Enter new address (current: {guest.get_address()}): ")
                contact_details = input(f"Enter new contact details (current: {guest.get_contact_details()}): ")

                guest.set_name(name)
                guest.set_address(address)
                guest.set_contact_details(contact_details)

                print("Guest modified successfully!")
                return
        print("Guest not found.")

    def display_guest(self):
        guest_id = int(input("Enter guest ID to display: "))
        for guest in self.guests:
            if guest.get_guest_id() == guest_id:
                print("Guest Details:")
                print(f"Guest ID: {guest.get_guest_id()}")
                print(f"Name: {guest.get_name()}")
                print(f"Address: {guest.get_address()}")
                print(f"Contact Details: {guest.get_contact_details()}")
                return
        print("Guest not found.")

# Create the Tkinter window and pass it to the ManagementApp class
root = tk.Tk()
app = ManagementApp(root)
root.mainloop()  # Start the Tkinter event loop